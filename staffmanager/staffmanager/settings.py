"""
Django settings for staffmanager project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-=jv8f-b_8uv8nqr!n_p30zqyf3zur$ex_v81elysd5possu6kx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# 1. Добавляем константу для DjDT, чтобы он понимал - запросы с каких IP адресов надо обрабатывать
INTERNAL_IPS = [
    "127.0.0.1",
]


# Application definition

INSTALLED_APPS = [
    # Регистрируем приложения учёта персонала и рабочих мест в наcтройках
    "staff",
    "workplaces",
    # Регистрация WYSIWYG-редактора django-ckeditor-5
    "django_ckeditor_5",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 2. Добавляем DjDT в список установленных приложений. DjDT must be after 'django.contrib.staticfiles'
    "debug_toolbar",
    "django_cleanup.apps.CleanupConfig",  # Для физического удаления файлов после удаления ссылок на них в админке или удаления моделей.
    # ВАЖНО! Приложение django_cleanup должно быть последним в списке установленных приложений
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # По умолчанию статические файлы (css, js, картинки для интерфейса..)
    # в папке app_name/static/,
    # но удобнее хранить их в спец.папке (например, static_dev.).
    # Для этого в settings.py нужно создать константу STATICFILES_DIRS
    # 3. Добавляем DjDT в слой Middleware в качестве middleware
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "staffmanager.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",  # Подключен Джанго-шаблонизатор (DjangoTemplates).
        # Но можно использовать и Jinja2
        "DIRS": [
            BASE_DIR / "templates"
        ],  # 'DIRS': [] поиск шаблонов по умолчанию будет в подпапке templates/app_name в папке приложения
        # или 'DIRS': [BASE_DIR / 'templates'] в указанной папке для хранения шаблонов в папке проекта BASE_DIR/,
        "APP_DIRS": True,  # True - поиск шаблонов в папке приложения после поиска в папке проекта
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "staffmanager.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Определим конфигурацию CKEditor-5: включаем режим полного набора инструментов и настраиваем высоту редактора
CKEDITOR_5_CONFIGS = {
    "default": {
        "toolbar": "full",
        "height": 100,
        "width": "auto",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ru"
# LANGUAGE_CODE = 'en-us'

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR
    / "static_DEV",  # Локальная папка на уровне проекта static_dev для хранения статических файлов (подапки css, js, img, files..)
    # Перед использованием в шаблонах надо загрузить тег {% load static %} в шаблонах
]

# Загрузка пользовательских файлов
MEDIA_URL = "media/"  # url для загрузки файлов пользователями
MEDIA_ROOT = (
    BASE_DIR / "media"
)  # адрес локальной папки для хранения файлов пользователей

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AUTH_USER_MODEL = "staff.Staff"
